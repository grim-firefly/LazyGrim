{
	"basic structure": {
		"prefix": "basic",
		"body": [
			"",
			"//Code Start",
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"//constant",
			"#define PI acos(-1.0)",
			"#define SZ 10000",
			"#define mod 1000000007",
			"//typedef",
			"typedef long long ll;",
			"typedef unsigned long long ull;",
			"typedef long double ld;",
			"typedef double db;",
			"typedef unsigned un;",
			"typedef pair<int, int> pii;",
			"typedef vector<int> vi;",
			"",
			"//Debug Setting up",
			"#define watch(x) cout << (#x) << \"=\" << x << endl",
			"#define watch2(x, y) cout << (#x) << \"=\" << x << \" & \" << (#y) << \"=\" << y << endl;",
			"#define watchara(wow)  for (auto x : wow){cout << x << \" \";}cout<<\"\\n\"",
			"",
			"//defining fast_io",
			"#define fast_io ios_base::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL)",
			"",
			"//defining something",
			"#define F first",
			"#define S second",
			"",
			"//Main Function Start From Here",
			"void solve()",
			"{",
			"    ${0}",
			"}",
			"",
			"int main()",
			"{",
			"    fast_io;    ",
			"    ",
			"    solve();",
			"",
			"    return 0;",
			"}"
		],
		"description": "basic structure"
	},
	"for loop for stl": {
		"prefix": "fstl",
		"body": [
			"for(auto ${1:i}=${2:vec}.begin();${1:i}!=${2:vec}.end();${1:i}++)",
			"{",
			"\t$0",
			"}"
		],
		"description": "for loop for stl"
	},
	"for auto direct access": {
		"prefix": "fda",
		"body": [
			"for(auto &${1:x}:${2:wow})",
			"{",
			"\t$0",
			"}"
		],
		"description": "for auto direct access"
	},
	"for reverse loop for stl": {
		"prefix": "fstlr",
		"body": [
			"for(auto ${1:i}=${2:vec}.rbegin();${1:i}!=${2:vec}.rend();${1:i}++)",
			"{",
			"\t$0",
			"}"
		],
		"description": "for reverse loop for stl"
	},
	"void function": {
		"prefix": "vfun",
		"body": [
			"void ${1:function_name}(${2:perimeter})",
			"{",
			"\t$0",
			"}"
		],
		"description": "void function"
	},
	"type function": {
		"prefix": "tfun",
		"body": [
			"${1:int} ${2:function_name}(${3:perimeter})",
			"{",
			"\t$0",
			"}"
		],
		"description": "type function"
	},
	"return": {
		"prefix": "rt",
		"body": [
			"return $0",
		],
		"description": "return"
	},
	//printing start here
	"new line": {
		"prefix": "cnl",
		"body": [
			"cout<<\"\\n\";",
			"$0"
		],
		"description": "new line"
	},
	"printing case": {
		"prefix": "cas",
		"body": [
			"cout << \"Case \" << cas << \": \";",
			"${0}"
		],
		"description": "printing case"
	},
	"printing YES": {
		"prefix": "YES",
		"body": [
			"cout << \"YES\\n\";",
			"${0}"
		],
		"description": "printing YES"
	},
	"printing Yes": {
		"prefix": "Yes",
		"body": [
			"cout << \"Yes\\n\";",
			"${0}"
		],
		"description": "printing Yes"
	},
	"printing NO": {
		"prefix": "NO",
		"body": [
			"cout << \"NO\\n\";",
			"${0}"
		],
		"description": "printing NO"
	},
	"printing No": {
		"prefix": "No",
		"body": [
			"cout << \"No\\n\";",
			"${0}"
		],
		"description": "printing No"
	},
	"printing 1 anything": {
		"prefix": "o1",
		"body": [
			"cout << ${1:x}<<\"\\n\";",
			"${0}"
		],
		"description": "printing 1 anything"
	},
	"output 2 anything": {
		"prefix": "o2",
		"body": [
			"cout<<${1:x}<<\" \"<<${2:y}<<\"\\n\";",
			"${0}"
		],
		"description": "output 2 anything"
	},
	"output 3 anything": {
		"prefix": "o3",
		"body": [
			"cout<<${1:x}<<\" \"<<${2:y}<<\" \"<<${3:z}<<\"\\n\";",
			"${0}"
		],
		"description": "output 3 anything"
	},
	"output 4 anything": {
		"prefix": "o4",
		"body": [
			"cout<<${1:x}<<\" \"<<${2:y}<<\" \"<<${3:z}<<\" \"<<${4:a}<<\"\\n\";",
			"${0}"
		],
		"description": "output 4 anything"
	},
	//intput
	"taking 1 anything": {
		"prefix": "i1",
		"body": [
			"cin>>${1:x};",
			"${0}"
		],
		"description": "taking 1 anything"
	},
	"taking 2 anything": {
		"prefix": "i2",
		"body": [
			"cin>>${1:x}>>${2:y};",
			"${0}"
		],
		"description": "taking 2 anything"
	},
	"taking 3 anything": {
		"prefix": "i3",
		"body": [
			"cin>>${1:x}>>${2:y}>>${3:z};",
			"${0}"
		],
		"description": "taking 3 anything"
	},
	"taking 4 anything": {
		"prefix": "i4",
		"body": [
			"cin>>${1:x}>>${2:y}>>${3:z}>>${4:a};",
			"${0}"
		],
		"description": "taking 4 anything"
	},
	"getline": {
		"prefix": "gl",
		"body": [
			"getline(cin,${1:str});",
			"$0"
		],
		"description": "getline"
	},
	"get char string": {
		"prefix": "gs",
		"body": [
			"cin.getline(${1:str},${2:size});\n$0"
		],
		"description": "get char string"
	},
	"get char": {
		"prefix": "gc",
		"body": [
			"getchar();\n$0"
		],
		"description": "get char"
	},
	"test cases for intiger": {
		"prefix": "test",
		"body": [
			"int Test_Limit;",
			"cin>>Test_Limit;",
			"for (int cas = 1; cas <= Test_Limit; cas++)",
			"{",
			"\t$0",
			"}"
		],
		"description": "test cases for intiger"
	},
	"while decrementing": {
		"prefix": "wa",
		"body": [
			"int ${1:t};",
			"cin>> ${1:t};",
			"while(${1:t}--)",
			"{",
			"\t$0",
			"}"
		],
		"description": "while decrementing"
	}
}
