{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"basic type def": {
		"prefix": "basic",
		"body": [
			"",
			"//Code Start",
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"//constant",
			"#define PI acos(-1.0)",
			"",
			"//typedef",
			"typedef long long ll;",
			"typedef unsigned long long ull;",
			"typedef long double ld;",
			"typedef unsigned un;",
			"typedef pair<int, int> pii;",
			"typedef pair<ll, ll> pll;",
			"typedef vector<int> vi;",
			"typedef vector<ll> vll;",
			"typedef vector<string> vs;",
			"typedef vector<pii> vii;",
			"typedef map<int, int> mii;",
			"typedef map<char, char> mcc;",
			"typedef map<char, int> mci;",
			"typedef map<string, int> msi;",
			"typedef map<ll, ll> mll;",
			"typedef set<int> seti;",
			"typedef set<ll> setl;",
			"typedef queue<int> qui;",
			"typedef deque<int> dqui;",
			"",
			"//Debug Setting up",
			"#define watch(x) cout<< (#x)<<\" is \"<<x<<endl",
			"#define watchara(wow)  for(auto x:wow) cout<<x<<\" \"",
			"",
			"",
			"//defining something",
			"#define SZ 10000",
			"",
			"//main function start",
			"",
			"int main()",
			"{",
			"\tios_base::sync_with_stdio(0);",
			"\tcin.tie(0);",
			"",
			"\t$0",
			"",
			"\treturn 0;",
			"}"
		],
		"description": "basic type def"
	},
	"printf for all": {
		"prefix": "pf",
		"body": "printf(\"$1\"$2);\n$0",
		"description": "printing anything using C mehod :)"
	},
	"printing newline": {
		"prefix": "pfn",
		"body": "printf(\"\\n\");\n$0",
		"description": "printing new line"
	},
	"printing case": {
		"prefix": "pfcas",
		"body": "printf(\"Case %d: \", cas);\n$0",
		"description": "printing Case number"
	},
	"printing YES": {
		"prefix": "yes",
		"body": "printf(\"YES\\n\");\n$0",
		"description": "printing yes"
	},
	"printing NO": {
		"prefix": "no",
		"body": "printf(\"NO\\n\");\n$0",
		"description": "printing NO"
	},
	"output 1 intiger": {
		"prefix": "pfi",
		"body": [
			"printf(\"%d\\n\",${1:x});",
			"$0"
		],
		"description": "output 1 intiger"
	},
	"output 2 intiger": {
		"prefix": "pfii",
		"body": [
			"printf(\"%d %d\\n\",${1:x},${2:y});",
			"$0"
		],
		"description": "output 2 intiger"
	},
	"output 3 intiger": {
		"prefix": "pfiii",
		"body": [
			"printf(\"%d %d %d\\n\",${1:x},${2:y},${3:z});",
			"$0"
		],
		"description": "output 3 intiger"
	},
	"take input": {
		"prefix": "sf",
		"body": [
			"scanf(\"${1:%d}\",${2:&x});",
			"$0"
		],
		"description": "take input"
	},
	"take input 1 intiger": {
		"prefix": "sfi",
		"body": [
			"scanf(\"%d\",&${1:x});",
			"$0"
		],
		"description": "take input 1 intiger"
	},
	"take input 2 intiger": {
		"prefix": "sfii",
		"body": [
			"scanf(\"%d %d\",&${1:x},&${2:y});",
			"$0"
		],
		"description": "take input 2 intiger"
	},
	"take input 3 intiger": {
		"prefix": "sfiii",
		"body": [
			"scanf(\"%d %d %d\",&${1:x},&${2:y},&${3:z});",
			"$0"
		],
		"description": "take input 3 intiger"
	},
	"take input 4 intiger": {
		"prefix": "sfiv",
		"body": [
			"scanf(\"%d %d %d %d\",&${1:x},&${2:y},&${3:z},&${4:w});",
			"$0"
		],
		"description": "take input 4 intiger"
	},
	"getline": {
		"prefix": "gl",
		"body": [
			"getline(cin,${1:str});",
			"$0"
		],
		"description": "getline"
	},
	"test case start": {
		"prefix": "test",
		"body": [
			"for (${1:int} cas = 1; cas <= ${2:count}; cas++)",
			"{",
			"\t$0",
			"}"
		],
		"description": "test case start"
	},
	"while decrementing": {
		"prefix": "wa",
		"body": [
			"while(${1:t}--)",
			"{",
			"\t$0",
			"}"
		],
		"description": "while decrementing"
	},
	"for loop for stl": {
		"prefix": "fstl",
		"body": [
			"for(auto ${1:i}=${2:vec}.begin();${1:i}!=${2:vec}.end();${1:i}++)",
			"{",
			"\t$0",
			"}"
		],
		"description": "for loop for stl"
	},
	"for auto direct access": {
		"prefix": "fda",
		"body": [
			"for(auto &${1:x}:${2:wow})",
			"{",
			"\t$0",
			"}"
		],
		"description": "for auto direct access"
	},
	"for reverse loop for stl": {
		"prefix": "fstlr",
		"body": [
			"for(auto ${1:i}=${2:vec}.rbegin()-1;${1:i}!=${2:vec}.rend()-1;${1:i}++)",
			"{",
			"\t$0",
			"}"
		],
		"description": "for reverse loop for stl"
	},
	"void function": {
		"prefix": "vfun",
		"body": [
			"void ${1:function_name}(${2:perimeter})",
			"{",
			"\t$0",
			"}"
		],
		"description": "void function"
	},
	"type function": {
		"prefix": "tfun",
		"body": [
			"${1:int} ${2:function_name}(${3:perimeter})",
			"{",
			"\t$0",
			"}"
		],
		"description": "type function"
	},
	"return": {
		"prefix": "rt",
		"body": [
			"return $0",
		],
		"description": "return"
	}
}