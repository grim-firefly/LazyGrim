{
	"basic structure": {
		"prefix": "basic",
		"body": [
			"/*  (: Bismillahir Rahmanir Rahim :)  */",
			"/*",
			"",
			"   Motto - Try Hard To become   **Blue**  :)",
			"",
			"*/",
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"//constant",
			"#define PI acos(-1.0)",
			"#define endl '\\n'",
			"#define SZ 10000",
			"#define mod 1000000007",
			"//typedef",
			"typedef long long ll;",
			"typedef unsigned long long ull;",
			"typedef long double ld;",
			"typedef double db;",
			"typedef unsigned un;",
			"typedef pair<int, int> pii;",
			"//Debug Setting up",
			"#define watch(x) cout << (#x) << \"=\" << x << endl",
			"#define watch2(x, y) cout << (#x) << \"=\" << x << \" & \" << (#y) << \"=\" << y << endl;",
			"#define watchara(wow)  for (auto x : wow){cout << x << \" \";}cout<<\"\\n\"",
			"",
			"//defining fast_io",
			"#define fast_io ios_base::sync_with_stdio(false); cin.tie(NULL);cout.tie(NULL)",
			"",
			"//defining something",
			"#define F first",
			"#define S second",
			"",
			"// defining Graph direction",
			"const int dx[] = {0, 0, 1, -1};",
			"const int dy[] = {1, -1, 0, 0};",
			"const int xx[] = {0, 0, 1, 1, 1, -1, -1, -1};",
			"const int yy[] = {1, -1, 0, 1, -1, 0, 1, -1};",
			"",
			"//Main Function Start From Here",
			"void solve()",
			"{",
			"    ${0}",
			"}",
			"",
			"int main()",
			"{",
			"    fast_io;    ",
			"    ",
			"    solve();",
			"",
			"    return 0;",
			"}"
		],
		"description": "basic structure"
	},
	"for loop for stl": {
		"prefix": "fstl",
		"body": [
			"for(auto ${1:i}=${2:vec}.begin();${1:i}!=${2:vec}.end();${1:i}++)",
			"{",
			"\t$0",
			"}"
		],
		"description": "for loop for stl"
	},
	"for auto direct access": {
		"prefix": "fda",
		"body": [
			"for(auto &${1:x}:${2:wow})",
			"{",
			"\t$0",
			"}"
		],
		"description": "for auto direct access"
	},
	"for reverse loop for stl": {
		"prefix": "fstlr",
		"body": [
			"for(auto ${1:i}=${2:vec}.rbegin();${1:i}!=${2:vec}.rend();${1:i}++)",
			"{",
			"\t$0",
			"}"
		],
		"description": "for reverse loop for stl"
	},
	"for loop from 1 to n": {
		"prefix": "for1",
		"body": [
			"for(${1:int} ${2:i}=1;${2:i}<=${3:n};${2:i}++){",
			"\t$0",
			"}"
		],
		"description": "for loop from 1 to n"
	},
	"return": {
		"prefix": "rt",
		"body": [
			"return $0",
		],
		"description": "return"
	},
	//printing start here
	"new line": {
		"prefix": "nl",
		"body": [
			"cout<<endl;",
			"$0"
		],
		"description": "new line"
	},
	"printing case": {
		"prefix": "cas",
		"body": [
			"cout << \"Case \" << cas << \": \";",
			"${0}"
		],
		"description": "printing case"
	},
	"printing YES": {
		"prefix": "YES",
		"body": [
			"cout << \"YES\\n\";",
			"${0}"
		],
		"description": "printing YES"
	},
	"printing Yes": {
		"prefix": "Yes",
		"body": [
			"cout << \"Yes\\n\";",
			"${0}"
		],
		"description": "printing Yes"
	},
	"printing NO": {
		"prefix": "NO",
		"body": [
			"cout << \"NO\\n\";",
			"${0}"
		],
		"description": "printing NO"
	},
	"printing No": {
		"prefix": "No",
		"body": [
			"cout << \"No\\n\";",
			"${0}"
		],
		"description": "printing No"
	},
	"getline": {
		"prefix": "gl",
		"body": [
			"getline(cin,${1:str});",
			"$0"
		],
		"description": "getline"
	},
	"get char string": {
		"prefix": "gs",
		"body": [
			"cin.getline(${1:str},${2:size});\n$0"
		],
		"description": "get char string"
	},
	"test cases for intiger": {
		"prefix": "test",
		"body": [
			"int Test_Limit;",
			"cin>>Test_Limit;",
			"for (int cas = 1; cas <= Test_Limit; cas++)",
			"{",
			"\t$0",
			"}"
		],
		"description": "test cases for intiger"
	},
	"while decrementing": {
		"prefix": "wa",
		"body": [
			"int ${1:t};",
			"cin>> ${1:t};",
			"while(${1:t}--)",
			"{",
			"\t$0",
			"}"
		],
		"description": "while decrementing"
	}
}
