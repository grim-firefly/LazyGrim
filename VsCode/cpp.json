{
	
	"basic type def": {
		"prefix": "basic",
		"body": [
			"",
			"//Code Start",
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"",
			"//constant",
			"#define PI acos(-1.0)",
			"",
			"//typedef",
			"typedef long long ll;",
			"typedef unsigned long long ull;",
			"typedef long double ld;",
			"typedef unsigned un;",
			"typedef pair<int, int> pii;",
			"typedef pair<ll, ll> pll;",
			"typedef vector<int> vi;",
			"typedef vector<ll> vll;",
			"typedef vector<string> vs;",
			"typedef vector<pii> vii;",
			"typedef map<int, int> mii;",
			"typedef map<char, char> mcc;",
			"typedef map<char, int> mci;",
			"typedef map<string, int> msi;",
			"typedef map<ll, ll> mll;",
			"typedef set<int> seti;",
			"typedef set<ll> setl;",
			"typedef queue<int> qui;",
			"typedef deque<int> dqui;",
			"",
			"//main function start",
			"",
			"int main()",
			"{",
			"\t$0",
			"\treturn 0;",
			"}"
		],
		"description": "basic type def"
	},
	"printf for all": {
		"prefix": "pf",
		"body": "printf(\"$1\"$2);\n$0",
		"description": "printing anything using C mehod :)"
	},
	"printing newline": {
		"prefix": "pfn",
		"body": "printf(\"\\n\");\n$0",
		"description": "printing new line"
	},
	"printing case": {
		"prefix": "pfcas",
		"body": "printf(\"Case %d: \", cas);\n$0",
		"description": "printing Case number"
	},
	"printing YES": {
		"prefix": "yes",
		"body": "printf(\"YES\\n\");\n$0",
		"description": "printing yes"
	},
	"printing NO": {
		"prefix": "no",
		"body": "printf(\"NO\\n\");\n$0",
		"description": "printing NO"
	},
	"take input": {
		"prefix": "sf",
		"body": [
			"scanf(\"${1:%d}\",${2:&x});",
			"$0"
		],
		"description": "take input"
	},
	"getline": {
		"prefix": "gl",
		"body": [
			"getline(cin,${1:str});"
		],
		"description": "getline"
	},
	"test case start": {
		"prefix": "test",
		"body": [
			"for (${1:int} cas = 1; cas <= ${2:count}; cas++)",
			"{",
			"\t$0",
			"}"
		],
		"description": "test case start"
	},
	"while decrementing": {
		"prefix": "wa",
		"body": [
			"while(${1:t}--)",
			"{",
			"\t$0",
			"}"
		],
		"description": "while decrementing"
	},
	"for loop for stl": {
		"prefix": "fstl",
		"body": [
			"for(auto ${1:i}=${2:vec}.begin();${1:i}!=${2:vec}.end();${1:i}++)",
			"{",
			"\t$0",
			"}"
		],
		"description": "for loop for stl"
	},
	"for reverse loop for stl": {
		"prefix": "fstlr",
		"body": [
			"for(auto ${1:i}=${2:vec}.end()-1;${1:i}!=${2:vec}.begin()-1;${1:i}--)",
			"{",
			"}"
		],
		"description": "for reverse loop for stl"
	},
	"void function": {
		"prefix": "vfun",
		"body": [
			"void ${1:function_name}(${2:perimeter})",
			"{",
			"\t$0",
			"}"
		],
		"description": "void function"
	},
	"type function": {
		"prefix": "tfun",
		"body": [
			"${1:int} ${2:function_name}(${3:perimeter})",
			"{",
			"\t$0",
			"}"
		],
		"description": "type function"
	},
	"return": {
		"prefix": "rt",
		"body": [
			"return ${1:0};",
		],
		"description": "return"
	}
}